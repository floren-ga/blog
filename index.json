





































































[{"categories":["javascript"],"contents":"addEventListener en navegadores no compatibles Los navegadores que no son compatibles con la especificación del DOM de la W3C no admiten el método addEventListener. Estos navegadores suelen ser versiones antiguas de Internet Explorer y Safari. Si necesita admitir estos navegadores, debe usar el método attachEvent en lugar de addEventListener. Para asignar un controlador de eventos, en lugar de addEventListener, debe usar el siguiente código:\nboton = document.getElementById(\u0026#34;button\u0026#34;);  if (boton.addEventListener) {  boton.addEventListener(\u0026#34;click\u0026#34;, handler, false); } else {  boton.attachEvent(\u0026#34;onclick\u0026#34;, handler); } ","date":"02 Jan, 2023","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cimg src=\"/images/javascript.svg\" loading=\"lazy\" decoding=\"async\" alt=\"\" class=\"w-100 img-fluid rounded\" width=\"\" height=\"\"\u003e\n \n \n\n","permalink":"https://blog.mrpyton.com/posts/javascript/soluciones_varias/","tags":["javascript","trucos","fragmentos de código","listener","event"],"title":"Fragmentos de código en javascript"},{"categories":["python"],"contents":"Reportlab Reportlab te permite crear documentos PDF desde Python. De código abierto, constituye una amplia librería con infinidad de utilidades.\nInstalación pip install reportlab Repositorio https://hg.reportlab.com/hg-public/\nAPI Permite generar documentos PDF directamente desde Python. Dispone de un lenguaje de plantillas llamado RML\nDocumentación: https://www.reportlab.com/dev/docs/\nHola Mundo! from reportlab.pdfgen import canvas c = canvas.Canvas(\u0026#34;hola-mundo.pdf\u0026#34;) c.drawString(50, 50, \u0026#34;¡Hola, mundo!\u0026#34;)  c.save() Esto da como resultado un pdf con el texto de \u0026ldquo;¡Hola Mundo!\u0026rdquo; en la parte inferior izquierda de la página.\nEl origen de coordenadas (0,0) se encuentra en el extremo inferior izquierdo.\nAlgunos datos El ancho y alto de la página, por defecto, son las correspondientes a un A4.\n Las dimensiones están expresadas en puntos.  Un A4 tiene:  Widht: 595.2 ptos Height: 841.8 ptos      Se puede establecer, al crear la instancia del canvas, la dimensión de cada una de las hojas, mediante el parámetro pagesize, que es una tupla (width, height).\nLíneas y figuras geométricas # línea c.line(x1, y1, x2, y2)  # rectángulo c.rectangle(x, y, width, height)  # rectángulo con esquinas redondeadas c.roundRect(x, y, width, height,radio)  # círculo c.circle(x,y,radio)  # elipse c.ellipse(x1, y1, x2, y2) Estilos # RGB entre 0.0 y 1.0. c.setFillColorRGB(1, 0, 0) c.drawString(x, y, \u0026#34;Texto en rojo\u0026#34;) c.rect(x1, y1, x2, y2, fill=True) # color del borde c.setStrokeColorRGB(0.7, 0, 0.7) Textos El método _drawString() está bien para dibujar alguna palabra, pero si se trata de textos más extensos no sirve, puesto que no acepta saltos de línea. Para estos casos se utiliza drawText()\n# En primer lugar: crear objeto y posicionarlo: t = c.beginText(200,200)  # Estilos, si procede: text.setFont(\u0026#34;Courier\u0026#34;, 10)  # con el método textLine añadimos líneas de texto al objeto t.textLine = (\u0026#34;Línea 1\u0026#34;) t.textLine = (\u0026#34;Línea 2\u0026#34;)  # o así: t.textLines(\u0026#34;Línea1\\nLínea 2\\nLínea3\u0026#34;)  # para dibujar: c.drawText(t) Imágenes # png, jpg, gif c.drawImage(\u0026#34;imagen.jpg\u0026#34;, x, y)  # establecer ancho y alto c.drawImage(\u0026#34;imagen.jpg\u0026#34;, x, y, width=50, height=50) # Ejemplo que posiciona una imagen en la esquina superior izquierda: from reportlab.pdfgen import canvas from reportlab.lib.pagesizes import A4 from reportlab.lib.utils import ImageReader  c = canvas.Canvas(\u0026#34;posicionar-imagen.pdf\u0026#34;, pagesize=A4) w, h = A4  # Ancho y alto de la imagen. img = ImageReader(\u0026#34;imagen.jpg\u0026#34;) img_w, img_h = img.getSize()  # h - img_h es el alto de la hoja menos el alto de la imagen. c.drawImage(img, 0, h - img_h) c.save() Tablas xlist = [10, 60, 110, 160] ylist = [h - 10, h - 60, h - 110, h - 160] c.grid(xlist, ylist) Formularios PDF interactivos con Python Con el kit de herramientas de ReportLab se pueden realizar formularios interactivos y rellenables.\nCheckbox  from reportlab.pdfgen import canvas from reportlab.lib.pagesizes import A4  w, h = A4 x = 0 y = 0  def createCheckBox():  x = w/2  y = h - 20  c = canvas.Canvas(\u0026#34;checkbox.pdf\u0026#34;)  c.setFont(\u0026#34;Courier\u0026#34;, 12)   c.drawCentredString(x, y,\u0026#34;CHECKBOXES CON PYTHON\u0026#34;)   y -= 20  x = 10   c.setFont(\u0026#34;Courier\u0026#34;, 9)  form = c.acroForm   c.drawString(x, y, \u0026#34;Lbl circle\u0026#34;)  form.checkbox(  name=\u0026#39;cb1\u0026#39;,  tooltip=\u0026#39;Checkbox 1\u0026#39;,  x = x + 60,  y = y - 5,  size= 15,  borderWidth=1,  forceBorder=True,  buttonStyle=\u0026#39;circle\u0026#39;  )  c.save()  if __name__ == \u0026#34;__main__\u0026#34;:  createCheckBox() ","date":"09 Nov, 2022","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cimg src=\"/images/python.svg\" loading=\"lazy\" decoding=\"async\" alt=\"\" class=\"w-100 img-fluid rounded\" width=\"\" height=\"\"\u003e\n \n \n\n","permalink":"https://blog.mrpyton.com/posts/python/reportlab/","tags":["python","pdf","formulario"],"title":"Formularios PDF"},{"categories":["javascript"],"contents":"Entender los métodos bind(), call() y apply() en javascript bind() El objeto car guarda los datos de un coche y dispone de un método que devuelve, concatenados, la marca y modelo del mismo:\nlet car = {  mark: \u0026#34;VOLVO\u0026#34;,  model: \u0026#34;XC60\u0026#34;,  getNameCar: function () {  let carIdentification = this.mark + \u0026#34; \u0026#34; + this.model;  return carIdentification;  }, }; La siguiente función imprime por consola los datos del coche:\nlet logData = function (color) {  console.log(\u0026#34;Car data: \u0026#34; + this.getNameCar());  console.log(\u0026#34;Car color: \u0026#34; + color); }; Al invocar esta función se generará un error:\nlogData(); // Error: this.getNameCar is not a function Esto es debido a que la función logData() no tiene un método llamado getNameCar().\nPara que funcione es necesario vincular la función con el objeto de esta forma:\n// Vincular la función con el objeto let logDataCar = logData.bind(car); El objeto pasado como argumento a bind() es a quien apunta this cuando se ejecuta la función.\nLa función bind() devuelve una nueva función. Crea una copia de logData().\nAl invocar esta función se obtendrá el valor esperado, pues this es car:\nlogDataCar(\u0026#34;blanco\u0026#34;); //Car data: VOLVO XC60 // Car color: blanco call() Es similar a bind(), pero no crea copia de la función, sino que la invoca inmediatamente. Le pasa el this al llamar a la función:\nlogData.call(car); //Car data: VOLVO XC60  logData.call(car, \u0026#34;blanco\u0026#34;); //Car data: VOLVO XC60 //Car color: blanco apply() Idéntico a call(), pero los argumentos se pasan como un array.\nlogData.apply(car, \u0026#34;blanco\u0026#34;); //Car data: VOLVO XC60 //Car color: blanco ","date":"23 Oct, 2022","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cimg src=\"/images/javascript.svg\" loading=\"lazy\" decoding=\"async\" alt=\"\" class=\"w-100 img-fluid rounded\" width=\"\" height=\"\"\u003e\n \n \n\n","permalink":"https://blog.mrpyton.com/posts/javascript/bind_call_apply/","tags":["javascript","js","arrays","bind","apply","call"],"title":"bind, call y apply en javascript"},{"categories":["javascript"],"contents":"Elementos duplicados en un array Existen muchas formas de saber si un array tiene elementos duplicados. En la red se pueden encontrar decenas de ejemplos.\nEl código que se muestra a continuación viene motivado por una necesidad del trabajo. En el momento de escribir el código no sabía exactamente si quería mostrar al usuario un mensaje detallado sobre el elemento o elementos duplicados o, simplemente, mostrar un mensaje genérico advirtiendo que existía algún elemento duplicado.\nVariante Boolean /** * @param {Array} arr * @returns {Boolean} */ function hasDuplicateValues(arr) {  let res = {};   arr.map((e) =\u0026gt; {  const key = e;  if (!res[key]) {  res[key] = [];  }  res[key].push(e);  });   let keys = Object.keys(res);   keys.forEach((e) =\u0026gt; {  if (res[e].length \u0026gt; 1) return true;  });   return false; }  arr = [1, 2, 3, 4]; // false arr = [1, 2, 3, 4, 4, 3]; // true Variante Verbose /** * @param {Array} arr * @returns {String} info */ function hasDuplicateValuesVerbose(arr) {  let res = {};  let info = [];   arr.map((e) =\u0026gt; {  const key = e;  if (!res[key]) {  res[key] = [];  }  res[key].push(e);  });   let keys = Object.keys(res);   keys.forEach((e) =\u0026gt; {  res[e].length \u0026gt; 1 ? info.push(e) : \u0026#34;\u0026#34;;  });   info =  info.length \u0026gt; 1  ? \u0026#34;Los siguientes valores están duplicados: \u0026#34; + info.join(\u0026#34;, \u0026#34;) + \u0026#34;.\u0026#34;  : info.length === 1  ? \u0026#34;El valor \u0026#34; + info.join(\u0026#34;\u0026#34;) + \u0026#34; está duplicado.\u0026#34;  : \u0026#34;No hay elementos duplicados.\u0026#34;;   return info; }  arr = [1, 2, 3, 4]; // No hay elementos duplicados. arr = arr = [1, 2, 3, 4, 3]; // El valor 3 está duplicado. arr = [1, 2, 3, 4, 3, 3, 2, 5, 1, 1, 1, 1, 6, 6]; // Los siguientes valores están duplicados: 1, 2, 3, 6. arr = [\u0026#34;Aragón\u0026#34;, \u0026#34;Baleares\u0026#34;, \u0026#34;Cantabria\u0026#34;, \u0026#34;Cantabria\u0026#34;, \u0026#34;Cantabria\u0026#34;, \u0026#34;Aragón\u0026#34;]; //Los siguientes valores están duplicados: Aragón, Cantabria. ","date":"23 Oct, 2022","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cimg src=\"/images/arrays.svg\" loading=\"lazy\" decoding=\"async\" alt=\"\" class=\"w-100 img-fluid rounded\" width=\"\" height=\"\"\u003e\n \n \n\n","permalink":"https://blog.mrpyton.com/posts/javascript/arrays_duplicados/","tags":["javascript","js","arrays","elementos duplicados"],"title":"Elementos duplicados en array"},{"categories":["javascript"],"contents":"Validación de un IBAN En mi trabajo he de validar números de IBAN ( International Bank Account Number) con mucha frecuencia.\nHasta ahora he utilizado un algoritmo que \u0026ldquo;alguien\u0026rdquo; había conseguido en internet, pero no me terminaba de convencer. En primer lugar porque no entendía muy bien alguna de las operaciones que hacía y, en segundo lugar, porque pensaba que se podría realizar con menos líneas de código.\nDespués de darle algunas vueltas, este es el resultado, bastante compacto, en mi opinión.\nLa función isValidIbanSpanish devuelve true o false en función de si el IBAN pasado como parámetro es válido o no lo es.\nfunction isValidIbanSpanish(iban) {  const LETRAS = \u0026#34;ABCDEFGHIJKLMNOPQRSTUVWXYZ\u0026#34;;   function mod(num, a) {  let res = 0;  // Trabajar con números muy grandes en javascript puede dar resultados no fiables. Para hallar el módulo se hace paso a paso a través de esta función.  // Recorrer todos los dígitos del IBAN  // Multiplicar el resultado anterior por 10, sumar el dígito que toque y calcular el resto  for (let i = 0; i \u0026lt; num.length; i++)  res = (res * 10 + parseInt(num[i])) % a;  return res;  }   // Pasar a mayúsculas y quitar espacios  let _iban = iban.toUpperCase().trim().replace(/\\s/g, \u0026#34;\u0026#34;);  if (_iban.length !== 24) return false;  // Dígito de control del iban a comprobar  const _dc = _iban.substring(2, 4);  // Trasladar las dos primeras posiciones (las letras) al final.  // Antes de hacerlo es preciso convertirlas a números.  // Se busca su posición en el array LETRAS y se suma 10.  let n1 = LETRAS.indexOf(_iban.substring(0, 1)) + 10;  let n2 = LETRAS.indexOf(_iban.substring(1, 2)) + 10;  _iban = _iban.substring(4) + n1 + n2 + \u0026#34;00\u0026#34;;  _mod = mod(_iban, 97);  dc = 98 - _mod;  dc = dc \u0026lt; 10 ? \u0026#34;0\u0026#34; + dc : dc;  if (_dc === String(dc)) return true;  else return false; } ","date":"16 Oct, 2022","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cimg src=\"/images/iban_javascript.svg\" loading=\"lazy\" decoding=\"async\" alt=\"\" class=\"w-100 img-fluid rounded\" width=\"\" height=\"\"\u003e\n \n \n\n","permalink":"https://blog.mrpyton.com/posts/javascript/iban/","tags":["javascript","js","iban","validación"],"title":"Validar IBAN "},{"categories":["python"],"contents":"Flask Instalación y puesta en marcha de Flask En primer lugar creamos una carpeta, por ejemplo, flask1.\nA continuación, desde la Terminal, creamos un entorno virtual:\nvirtualenv env Una vez creado el entorno, ejecutamos el siguiente comando:\n# En linux: source env/bin/activate  #En Windows: env\\Scripts\\activate.bat Se sabe que el entorno virtual está activado porque el promt comienza con (env).\nAhora es preciso instalar Flask. Para ello ejecutaremos el siguiente comando:\npip install flask  # Comprobar las dependencias del proyecto: pip freeze Primera aplicación en Flask Creamos un fichero denominado app.py:\nfrom flask import Flask  app = Flask(__name__)  @app.route(\u0026#39;/\u0026#39;) def index():  return \u0026#34;Hello World!\u0026#34; Con estas pocas líneas de código ya tenemos lista una aplilcación en Flask. ¡Increible!\nLas aplicaciones de Flask son instancias WSGI.\nProbar la aplicación Podemos usar el comando flask.run o también python -m app.py.\nRecuerda: activar el entorno con env\\Scripts\\activate (en Windows)\nDebug Al final del fichero env\\Scripts\\activate.bat añadir:\nset \u0026#34;FLASK_DEBUG=1\u0026#34; Desactivar el entorno y volver a activarlo. A partir de ahora estaremos en modo debug.\n * Debug mode: on WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.  * Running on http://127.0.0.1:5000 Press CTRL+C to quit  * Restarting with stat  * Debugger is active!  * Debugger PIN: 778-749-055 Algunos métodos útiles url_for() Método url_for() para componer una url a partir del nombre de una vista. Esta función admite el nombre de una vista y un número variable de argumentos clave-valor.\nEjemplo:\n# Dado el siguiente decorador: @app.route(\u0026#39;/p/\u0026lt;string:slug\u0026gt;/\u0026#39;) def show_post(slug):  return render_template(\u0026#34;post-view.html\u0026#34;, slug_title=slug) \nUrl devuelta por el método url_for: print(url_for(\u0026#34;show_post\u0026#34;, slug=\u0026#34;leccion-1\u0026#34;, preview=True)) /p/leccion-1/?preview=True render_template() Este método sirve para renderizar ficheros html.\nMigraciones Cuando usamos flask_migrate para sincronizar de forma automática los cambios que realicemos en nuestros modelos con la base de datos, hay 3 comandos importantes que recordar:\n flask db init flask db migrate flask db upgrade  Mostrar código fuente\r\r\r-- ","date":"01 Oct, 2022","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cimg src=\"/images/python.svg\" loading=\"lazy\" decoding=\"async\" alt=\"\" class=\"w-100 img-fluid rounded\" width=\"\" height=\"\"\u003e\n \n \n\n","permalink":"https://blog.mrpyton.com/posts/python/flask/","tags":["python","flask","framework","web"],"title":"Notas sobre flask"},{"categories":["python"],"contents":"tkinter Enlace a la documentación de tkinter.\nVentana básica con tkinter \rMostrar código fuente\rfrom tkinter import *  class Window():   def __init__(self):  self.root = Tk()  self.root.title(\u0026#34;Aplicación de ventanas con tkinter\u0026#34;)  self.root.geometry(\u0026#39;400x100\u0026#39;)  self.label = Label(self.root, text=\u0026#34;Pantalla generada con tkinter\u0026#34;, )  self.label.pack()    self.button_exit = Button(self.root, text = \u0026#34;Exit\u0026#34;, command = exit)  self.button_exit.pack()   self.root.mainloop()   if __name__ == \u0026#39;__main__\u0026#39;:  app = Window() Este es el resultado:\n\r\rExplorador de ficheros con tkinter Para crear un explorador de ficheros, hemos de importar el módulo filedialog de Tkinter. Este módulo le permite abrir una ventana de diálogo para buscar ficheros o directorios dentre de su sistema de archivos.\nA continuación se muestra cómo implementar un botón que abre un cuadro de diálogo para seleccionar un directorio:\n\rMostrar código fuente\rfrom tkinter import * from tkinter import filedialog  class Window():   def browseDir(self):  # directorio guarda la ruta de la carpeta seleccionada:  directorio= filedialog.askdirectory()  # Traslada la ruta a la etiqueta:  self.labelDirOrigen.configure( text= directorio)   def __init__(self):  # Configuración de la ventana  self.root = Tk()  self.root.title(\u0026#34;Filedialog with tkinter in Python\u0026#34;)  self.root.geometry(\u0026#39;1000x300\u0026#39;)   # Etiquetas  self.label = Label(self.root, text=\u0026#34;FILEDIALOG CON TKINTER\u0026#34;, )  self.label.pack()   self.labelDirOrigen = Label(self.root, text=\u0026#34;Carpeta origen:\u0026#34;)  self.labelDirOrigen.pack()   # Botón que abre la ventana de Diálogo:  self.buttonFD = Button(self.root, text=\u0026#34;Abrir carpeta...\u0026#34;, command=self.browseDir)  self.buttonFD.pack()   self.button_exit = Button(self.root, text = \u0026#34;Exit\u0026#34;, command = exit)  self.button_exit.pack()   self.root.mainloop()  if __name__ == \u0026#39;__main__\u0026#39;:  app = Window() \r\rPosicionar elementos con tkinter Posicionar los controles dentro de una ventana con tkinter se puede hacer de tres formas distintas: pack(), place() y grid(). No utilices varios métodos en la misma aplicación.\nplace() - Posicionamiento absoluto place() posiciona los elementos de forma absoluta.\n\rCódigo\rfrom tkinter import *  class Window():    def __init__(self):  # Configuración de la ventana  self.root = Tk()  self.root.title(\u0026#34;Posicionamiento con place()\u0026#34;)  self.root.geometry(\u0026#39;400x300\u0026#39;)   # Etiquetas  self.label = Label(self.root, text=\u0026#34;Cómo se posiciona con place()\u0026#34;, )  self.label.place(x=20, y=20)   self.button_exit = Button(self.root, text = \u0026#34;Exit\u0026#34;, command = exit)  self.button_exit.place(x=20, y=50, height=20, width=100)   self.root.mainloop()  if __name__ == \u0026#39;__main__\u0026#39;:  app = Window() \r\rx, y, width y height se pueden expresar en términos relativos respecto a la ventana padre. Si la ventana se redimensiona, los valores cambian. Esto se hace con las propiedades relwidth, relheight, relx y rely. Aceptan valores entre 0 y 1. \rCódigo\r # La etiqueta tiene un ancho y alto de la mitad del ancho y alto de la ventana: self.label.place(relwidth=0.5, relheight=0.5)  # Si la ventana tiene un tamaño de 300x200 el botón, al inicio, se encontrará en la posición (30,20). A medida que la ventana cambie, se actualiza la posición del botón. self.button.place(relx=0.1, rely=0.1, relwidth=0.5, relheight=0.5) \r\rpack() - Posicionamiento relativo ","date":"25 Sep, 2022","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cimg src=\"/images/python.svg\" loading=\"lazy\" decoding=\"async\" alt=\"\" class=\"w-100 img-fluid rounded\" width=\"\" height=\"\"\u003e\n \n \n\n","permalink":"https://blog.mrpyton.com/posts/python/tkinter/","tags":["python","tkinter","gui"],"title":"Notas sobre tkinter"},{"categories":["tools","herramientas"],"contents":"Links, por categorías, de sitios web.\nFotos y vídeos Pexels: fotos y vídeos gratuitas\nPixabay\nfavicon-generator\nrealfavicongenerator\nIconos font-awesome\nIcons 8\nfonts.google.com/icons\ncommons.wikimedia.org\nTexto Generador de texto - lorem ipsum\nGenerador de texto falso - mockaroo\ndatafakegenerator\nDiferencia entre dos textos\nWireframe wireframe\nmockuphone\nHTML, CSS, Javascript\u0026hellip; Mozilla.org\nW3 Schools\nEl tutorial de Javascript moderno\nAnimaciones CSS\nMinimizar cógigo JS o CSS Minimizar imágenes\nValidador HTML\nCreación de sitios web estáticos Hugo\nGatsby\nSergey\nTerminal Oh my Posh\n","date":"06 May, 2022","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cimg src=\"/images/tools.svg\" loading=\"lazy\" decoding=\"async\" alt=\"\" class=\"w-100 img-fluid rounded\" width=\"\" height=\"\"\u003e\n \n \n\n","permalink":"https://blog.mrpyton.com/posts/tools/","tags":["imágenes","iconos","favicon","fuentes"],"title":"Herramientas"},{"categories":["javascript"],"contents":" Array En javaScript un array es un objeto que puede contener diversos elementos. Estos elementos no tienen por qué ser todos del mismo tipo:\nlet un_array = [\u0026#34;lunes\u0026#34;, \u0026#34;martes\u0026#34;, 3, \u0026#34;jueves\u0026#34;, true, \u0026#34;sábado\u0026#34;, {}]; \nEl array dias contiene los 7 días de la semana:\nlet dias = [  \u0026#34;lunes\u0026#34;,  \u0026#34;martes\u0026#34;,  \u0026#34;miércoles\u0026#34;,  \u0026#34;jueves\u0026#34;,  \u0026#34;viernes\u0026#34;,  \u0026#34;sábado\u0026#34;,  \u0026#34;domingo\u0026#34;, ]; \nAcceso a un elemento del array:\nEl índice del primer elemento es el 0\nlet dia1 = dias[0]; // dia1 vale \u0026quot;lunes\u0026quot;  Longitud del array:\nEs una propiedad, no es un método (no lleva paréntesis):\ndias.length // 7 \n Iterar a través de un array:\nfor (let i = 0; i \u0026lt; dias.length; i++) {  print(dias[i]); } \nConversión de array a string con el método join()\nlet diasString = dias.join(\u0026#34;,\u0026#34;); print(diasString); //\u0026#39;lunes,martes,miércoles,jueves,viernes,sábado,domingo\u0026#39; \nConversión de array a string con el método toString()\nlet diasString = dias.toString(); print(diasString); //\u0026#39;lunes,martes,miércoles,jueves,viernes,sábado,domingo\u0026#39; \nConversión de string a array con el método split()\nlet arrDias = diasString.split(\u0026#34;,\u0026#34;); print(arrDias); //\u0026#39;[\u0026#39;lunes\u0026#39;, \u0026#39;martes\u0026#39;, \u0026#39;miércoles\u0026#39;, \u0026#39;jueves\u0026#39;, \u0026#39;viernes\u0026#39;, \u0026#39;sábado\u0026#39;, \u0026#39;domingo\u0026#39;] Métodos para agregar y eliminar elementos  push(): Añade un elemento al final de la matriz. pop(): Elimina un elemento al final de la matriz. shift(): Añade un elemento al inicio de la matriz. unshift(): Añade un elemento al final de la matriz. splice(): El primer parámetro define la posición donde se ubicarán los elementos. El segundo parámetro define cuántos elementos se van a remover. El resto de parámetros son los nuevos elementos a añadir.  let fruits = [\u0026#34;Banana\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Apple\u0026#34;, \u0026#34;Mango\u0026#34;]; fruits.splice(2, 0, \u0026#34;Lemon\u0026#34;, \u0026#34;Kiwi\u0026#34;); print(fruits); // [\u0026#39;Banana\u0026#39;, \u0026#39;Orange\u0026#39;, \u0026#39;Lemon\u0026#39;, \u0026#39;Kiwi\u0026#39;, \u0026#39;Apple\u0026#39;, \u0026#39;Mango\u0026#39;]  delete(): Elimina un elemento de la matriz. delete dias[0];  Diferencia entre delete() y splice(): Si se utiliza delete se elimina el valor del elemento, pero la longitud del array sigue siendo la misma:\nSi se utiliza splice() se elimina el elemento y la longitud de la matriz se reduce en la proporción de los elementos eliminados:\nconst frutas = [\u0026#34;melón\u0026#34;, \u0026#34;manzana\u0026#34;, \u0026#34;naranja\u0026#34;]; // Eliminar 2 elementos a partir de la posición 0 frutas.splice(0, 2); print(frutas); // [\u0026#39;naranja\u0026#39;] print(frutas.length); // 1 Ordenación de una matriz: ordena alfabéticamente\ndias.sort(); // [\u0026lsquo;domingo\u0026rsquo;, \u0026lsquo;jueves\u0026rsquo;, \u0026rsquo;lunes\u0026rsquo;, \u0026lsquo;martes\u0026rsquo;, \u0026lsquo;miércoles\u0026rsquo;, \u0026lsquo;sábado\u0026rsquo;, \u0026lsquo;viernes\u0026rsquo;]\nConcatenar arrays. Añade al primer array los elementos del segundo:\nconst poligonos1 = [\u0026#34;triángulo\u0026#34;, \u0026#34;cuadrado\u0026#34;]; const poligonos2 = [\u0026#34;rectángulo\u0026#34;]; poligonos1.concat(poligonos2); print(poligonos1); // [\u0026#39;triángulo\u0026#39;, \u0026#39;cuadrado\u0026#39;, \u0026#39;rectángulo\u0026#39;] ","date":"01 May, 2022","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cimg src=\"/images/arrays.svg\" loading=\"lazy\" decoding=\"async\" alt=\"\" class=\"w-100 img-fluid rounded\" width=\"\" height=\"\"\u003e\n \n \n\n","permalink":"https://blog.mrpyton.com/posts/javascript/arrays/","tags":["javascript","js","arrays"],"title":"Arrays en javascript"},{"categories":["html","colores","css"],"contents":"Colores web Enlaces a webs relacionadas con colores web que me han parecido interesantes.\nColores HTML\nPaleta de colores\nColor hexadecimal\nAdobe Color\nCoolors\nhailpixel\nuigradients\n","date":"01 Apr, 2022","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cimg src=\"/images/colores-web.svg\" loading=\"lazy\" decoding=\"async\" alt=\"\" class=\"w-100 img-fluid rounded\" width=\"\" height=\"\"\u003e\n \n \n\n","permalink":"https://blog.mrpyton.com/posts/colores_web/","tags":["color","colores web","paleta de colores"],"title":"Colores web"},{"categories":["markdown","método de escritura"],"contents":" Markdown es un lenguaje de marcado ligero que añade formato a documentos de texto sin formato. Es uno de los lenguajes de marcado más utilizados en el mundo. Y lo mejor de todo: ¡es muy fácil de aprender!.\n Sintaxis básica Encabezados # H1  ## H2  ### H3  #### H4  ##### H5  ###### H6 Párrafos Dos espacios en la línea anterior (antes del intro) permiten cambiar de línea.\nNegrita y cursiva:\n   Código Markdown Se muestra     **negrita** negrita   *cursiva* cursiva   ***negrita y cursiva*** negrita_cursiva    Citas Esta cita:\n\u0026gt; Cuán gritan estos malditos \u0026gt; pero, mal rayo me parta \u0026gt; si, en terminando esta carta \u0026gt; no pagan caro sus gritos (D. Juan Tenorio/Zorrilla) Se vería así:\n Cuán gritan estos malditos pero, mal rayo me parta\nsi, en terminando esta carta\nno pagan caro sus gritos (D. Juan Tenorio/Zorrilla)\n Líneas desordenadas - Lunes - Martes - Miércoles Se vería así:\n Lunes Martes Miércoles  Listas ordenadas o numeradas 1. Enero 2. Febrero  1. Semana 1  1. Semana 2  - Día 1 Enlaces [markdown](https://www.markdownguide.org/). Imágenes ![Texto de la imagen](/images/imagen.png \u0026#34;Título\u0026#34;) Tablas Se escribiría así:  | Columna1 | Columna2 | Columna3 | | -------- | -------- | -------- | | Valor1 | Valor2 | Valor3 | | Valor1 | Valor2 | Valor3 | | Valor1 | Valor2 | Valor3 | Se vería:\n   Columna1 Columna2 Columna3     Valor1 Valor2 Valor3   Valor1 Valor2 Valor3   Valor1 Valor2 Valor3    Reglas horizontales Se podría hacer de cualquier de las siguiente formas:\n--- (guiones medios) \\_\\_\\_ (guiones bajos)  Escritura de código fuente Se puede conseguir de distintos modos:\n`var a as String` Escribiendo 4 espacios en blanco al principio de la línea:\nvar a as String\rvar b as String\rPrivate Function Sumar(a,b)\rSumar = a + b\rEnd Function\r Código fuente Se utiliza el carácter (`) (acento grave) para rodear el bloque de código. Se puede crear código inline o en un bloque. En el primer caso se utiliza un carácter (`) de apertura y otro de cierre. En el caso del bloque de código se utilizan 3 caracteres (`) de apertura y 3 de cierre.\nCódigo en línea:\n\r\r`var a = 3;`\r\r\rBloque de código:\n\r\r```javascript var a = 3; var b = 5; function sumar(a, b) {\rreturn a + b;\r}\r```\r\r\rResaltado de sintaxis Ejemplo de código formateado con javascript:\nvar a = 3; var b = 5;  function sumar(a, b) {  return a + b; } Ejemplo de código formateado con Visual Basic:\ndim a as String dim b as String  Private Function suma(a,b)  suma = a+b End Function Comentarios [comment]: \u0026lt;\u0026gt; (Comentario)\r[//]: \u0026lt;\u0026gt; (Comentario)\r[//]: # (Comentario)  Extensiones interesantes para VBCode   Markdown Converter permite convertir documentos escritos en markdown a pdf o html. En Configuración, buscar Markdown Converter: Conversion Type para ajustar qué tipo de fichero desea exportar (html, pdf o ambos).\n  Markdown Extended Enhanced\n  ","date":"01 Apr, 2022","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cimg src=\"/images/markdown.svg\" loading=\"lazy\" decoding=\"async\" alt=\"\" class=\"w-100 img-fluid rounded\" width=\"\" height=\"\"\u003e\n \n \n\n","permalink":"https://blog.mrpyton.com/posts/editores/markdown/","tags":["markdown","escritura"],"title":"Notas breves sobre Markdown"},{"categories":["contenido estático","javascript"],"contents":"Hugo Hugo es un framework que permite crear websites estáticos de forma muy rápida.\nLa comunidad de desarrolladores ha creado multitud de temas que puedes usar de forma gratuita para tu blog personal. Desde la web de Hugo puedes acceder a muchos de ellos y si buscas en internet puedes encontrar muchos más.\n Un par de temas que me han gustado:    Tema docport\n  Tema Bookworm\n  Highlight: lista de lenguajes de programación  highlight  Comandos básicos Se da por supuesto que Hugo está instalado en el equipo.\nCrear un nuevo sitio con Hugo\nhugo new site [path] [flags] Crear un nuevo post\nhugo new posts/primer-post.md Arrancar servidor\n// Desde la terminal, y situado en la carpeta del proyecto: hugo server Generar sitio\nhugo; Un nuevo post\nhugo new posts/primer_post.md  Goldmark ¡Ojo con esto!  Hugo utiliza una biblioteca para renderizar Markdown denominada Goldmark. Por defecto, el parámetro unsafe de goldmark vale false. Esto implica que Goldmark no procesa HTML. Para activarlo, desde el fichero config.toml haga lo siguiente:\n[markup.goldmark.renderer]\runsafe= true Ahora sí se renderizarán los enlaces e imágenes que incluyas en tus ficheros markdown.\n","date":"01 Mar, 2022","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cimg src=\"/images/hugo.svg\" loading=\"lazy\" decoding=\"async\" alt=\"\" class=\"w-100 img-fluid rounded\" width=\"\" height=\"\"\u003e\n \n \n\n","permalink":"https://blog.mrpyton.com/posts/hugo/","tags":["javascript","contenido web estático","hugo"],"title":"Hugo js"},{"categories":["bash"],"contents":"Scripts sencillos de bash Hola mundo en bash #!/bin/bash  # Primer script echo \u0026#34;Hola Mundo!\u0026#34; Variables A=\u0026#39;Hola mundo con bash!\u0026#39; echo $A  # Salida: Hola mundo con bash! Control de flujo - Bucles For #!/bin/bash for numero in {1..20..2}; do \techo Este es el número: $numero done  # Imprime: Este es el número: 1 Este es el número: 3 Este es el número: 5 Este es el número: 7 Este es el número: 9 Este es el número: 11 Este es el número: 13 Este es el número: 15 Este es el número: 17 Este es el número: 19 - Condicionales (if) nombre=\u0026#39;Pepe\u0026#39;  if [[ nombre==\u0026#39;Pepe\u0026#39; ]]; # \u0026lt;- Atención a los espacios y a los corchetes  echo \u0026#34;El nombre es Pepe\u0026#34; then elif [[ nombre==\u0026#39;Juan\u0026#39; ]]  echo \u0026#34;El nombre es Juan\u0026#34; else  echo \u0026#34;No es ni Pepe ni Juan\u0026#34; fi  # Imprime El nombre es Pepe \u0026ndash; Condicionales con números    Operador Significado     -lt Menor que (\u0026lt;)   -gt Mayor que (\u0026gt;)   -le Menor o igual que (\u0026lt;=)   -ge Mayor o igual que (\u0026gt;=)   -eq Igual (==)   -ne Distinto de (!=)    #test.sh #!/bin/bash num1=$1 # la variable toma el primer valor que le pasamos al script num2=$2 # la variable toma el segundo valor que le pasamos al script if [[ $num1 -gt $num2 ]]; then \techo $num1 es mayor que $num2 else \techo $num2 es mayor que $num1 fi Si ejecutamos el fichero, con los parámetros siguientes:\n$ ./test.sh 2 3  #Imprime: 3 es mayor que 2 Condicionales con cadenas de texto    Operador Significado     = igual, las dos cadenas de texto son exactamente idénticas   != no igual, las cadenas de texto no son exactamente idénticas   \u0026lt; es menor que (en orden alfabético ASCII)   \u0026gt; es mayor que (en orden alfabético ASCII)   -n la cadena no está vacía   -z la cadena está vacía    Wildcards (comodines): *\nCondicionales con archivos    operador Devuelve true si     -e name name existe   -f name name es un archivo normal (no es un directorio)   -s name name NO tiene tamaño cero   -d name name es un directorio   -r name name tiene permiso de lectura para el user que corre el script   -w name name tiene permiso de escritura para el user que corre el script   -x name name tiene permiso de ejecución para el user que corre el script    El siguiente script nos informa sobre el contenido de un directorio:\n#!/bin/bash for file in $(ls); do  if [[ -d $file ]];  then  echo directorio: $file  else  if [[ -x $file ]];  then  echo archivo ejecutable: $file  else  echo archivo no ejecutable: $file  fi  fi done Funciones #!/bin/bash  echo \u0026#34;Script de una función\u0026#34; a=7 b=67  function suma() {  echo \u0026#34;La suma de $a+$bes: \u0026#34; $(($1+$2)) } suma $a $b Borrar un directorio de forma recursiva $ rm -r Dir1 [Dir2 Dir3] Fecha actual: $ date # sábado, 25 de abril de 2020, 11:44:03 CEST $ date +\u0026#34;%a\u0026#34; # sáb $ date +\u0026#34;%A\u0026#34; # sábado $ date +\u0026#34;%b\u0026#34; # abr $ date +\u0026#34;%B\u0026#34; # abril $ date +\u0026#34;%d\u0026#34; # 25 $ date +\u0026#34;%D\u0026#34; # 04/25/20 $ date +\u0026#34;%F\u0026#34; # 2020-04-25 $ date +\u0026#34;%H\u0026#34; # 11 (horas) $ date +\u0026#34;%M\u0026#34; # 49 (minutos) $ date +\u0026#34;%S\u0026#34; # 23 (segundos) $ date +\u0026#34;%T\u0026#34; # 11:51:07 $ date +\u0026#34;%U\u0026#34; # 16 (semana) $ date +\u0026#34;%Z\u0026#34; # CEST (TimeZone) $ date +\u0026#34;%d-%m-%y\u0026#34; # 25-04-20 $ date +\u0026#34;%d-%m-%Y\u0026#34; # 25-04-2020 Crear un directorio y dentro un archivo # El nombre de la carpeta y del archivo es el día actual, en formato yyyymmdd  #fecha actual fecha=`date +\u0026#34;%Y%m%d\u0026#34;`  #crear directorio mkdir $fecha  # poner el cursor en la carpeta creada cd $fecha  #crear fichero touch $fecha.txt  #Mostrar mensaje echo \u0026#34;Se he creado el directorio $fechay, dentro de este, el archivo $fecha.txt\u0026#34; Comandos sobre el uso de disco -du (Uso de disco)\n-df (Sistema de archivos de disco)\n Modificadores:  -h (human) -s (muestra el total que ocupa)    $ df  # Muestra algo así: Filesystem 1K-blocks Used Available Use% Mounted on C:/Program Files/Git 231422972 132131860 99291112 58% / D: 17342460 15307100 2035360 89% /d  $ df -h  # Muestra algo así: Filesystem Size Used Avail Use% Mounted on C:/Program Files/Git 221G 127G 95G 58% / D: 17G 15G 2,0G 89% /d    # uso del disco  $ du -sh 5,1G . Comandos para buscar texto   find: \u0026lt;find camino opciones\u0026gt;\n -name \u0026ldquo;expresión\u0026rdquo; -iname \u0026ldquo;expresión\u0026rdquo; -type  f (file) d (directory) l (link)   -exec ( \u0026ldquo;{}\u0026rdquo; \u0026ldquo;;\u0026rdquo;)    #Ejemplo de find con exec  #Buscar los ficheros jpg #Copiarlos a la ruta /Documents/test  $ find -iname \u0026#34;*.jpg\u0026#34; -exec cp \u0026#39;{}\u0026#39; c:/test \u0026#39;;\u0026#39; Comandos para mostrar texto  cat -n : muestra el nº de línea more less head tail  Comandos para filtrar texto  cut: (selección vertical) -c : carácter -d : delimitador -f : (field) columna a mostrar  # Muestra el primer carácter de cada línea del fichero cut -c1 fichero.txt  # Muestra los caracteres 1 a 10 de cada línea del fichero cut -c1-10 fichero.txt  #Distintos intervalos cut -c1-10,20-30 ficheros.txt # -d indica el separador que se va a usar # -f indica la columna que se va a extraer cut -d\u0026#34;;\u0026#34; -f1 nombres.csv   grep: Muestra solo las líneas que cumplen con un patrón. Se pueden usar palabras o expresiones regulares.\n-v : Muestra las que NO coinciden con el patrón -l : Indica el nombre del fichero donde ha encontrado la coincidencia -w : El patrón tiene que ser una palabra independiente -n : Indica el nº de línea -i : no distingue entre mayúsculas y minúsculas -c : nº de líneas que cumplen el patrón -r : búsqueda recursiva\n   # Búsqueda recursiva desde el directorio actual; muestra el nombre del fichero que cumple el patrón  grep -l -r markdown  # Elimina las líneas en blanco:  $ grep -v \u0026#39;^$\u0026#39; Truco Cuando recorremos un directorio con ficheros cuyo nombre puede que contenga espacios en blanco (algo muy habitual si descargamos vídeos con youtube-dl), no funciona el típico:\n#!/bin/bash  directorio=\u0026#34;midirectorio\u0026#34;  for i in $(ls $directorio) do  echo $i done Ni siquiera serviría entrecomillar el $i, ya que no le llegaría el nombre del fichero al recortarse en el for.\nLa solución es cambiar antes de hacer el for el separador de campo con:\nIFS=\u0026rsquo; '\nQuedando el script así:\n#!/bin/bash  directorio=\u0026#34;midirectorio\u0026#34; IFS=\u0026#39; \u0026#39;  for i in $(ls $directorio) do  echo $i done ","date":"02 Jan, 2022","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cimg src=\"/images/bash.svg\" loading=\"lazy\" decoding=\"async\" alt=\"\" class=\"w-100 img-fluid rounded\" width=\"\" height=\"\"\u003e\n \n \n\n","permalink":"https://blog.mrpyton.com/posts/bash/notas-bash/","tags":["bash"],"title":"Scripts de bash"},{"categories":["bash"],"contents":"Una poderosa herramienta para procesar datos AWK es un lenguaje de programación diseñado para el procesamiento de datos basados en texto. El nombre, según la Wikipedia, procede de las iniciales de sus autores: Alfred Aho, Peter Weinberger y Brian Kernighan (AWK).\n Se usa así:\n$ awk options program file awk puede tomar las siguientes opciones:\n -F (fs) Para especificar un separador de archivos. -f (file) Para especificar un archivo que contenga un script awk. -v (var=value) Para declarar una variable.  Para definir un script awk utilizamos llaves rodeadas por unas comillas simples\n$ awk \u0026#39;{print \u0026#34;Welcome to awk command tutorial \u0026#34;}\u0026#39; Utilizando Variables Una de la potencia de awk es su capacidad para procesar ficheros de texto.\nawk asigna algunas variables para cada campo de datos encontrado:\n $0 para toda la línea. $1 para el primer campo. $2 para el segundo campo. $n para el campo enésimo campo.   Ejemplo 1: $0\n $ awk \u0026#39;{print $0}\u0026#39; test.txt # salida: Este es un ejemplo de texto con varias líneas  Ejemplo 2: $1\n $ awk \u0026#39;{print $1}\u0026#39; test.txt # Salida: (sólo imprime la primera palabra de cada línea): Este de varias líneas Separador Es posible que, en determinados casos, el separador no sea ni el espacio ni la tabulación, sino otro u otros caracteres. Se puede especificar con el parámetro – F:\nEjemplo 3: uso de -F (separador)\n # En este caso el separador es \u0026#34;:\u0026#34; $ awk -F: \u0026#39;{print $1}\u0026#39; /etc/passwd # Salida:  nobody root daemon _uucp _taskgated _networkd _installassistant _lp _postfix _scsd ... Utilizando múltiples comandos Para ejecutar múltiples comandos, sepáralos con un símbolo de punto y coma (;) de la siguiente forma:\nEjemplo 4: uso de varios comandos\n $ echo \u0026#34;Hola Tom\u0026#34; | awk \u0026#39;{$2=\u0026#34;Juan\u0026#34; ; print $0}\u0026#39; # Salida: Hola Juan Leer el script desde un archivo Escribir el script awk en un archivo y especificarlo utilizando la opción –f:\nContenido del script awk escrito en el fichero testfile:\n{print $1 \u0026#34; home at \u0026#34; $6}  Ejemplo 5: ejecutar un script awk escrito en un fichero\n $ awk -F: -f testfile /etc/passwd # salida: nobody home at /var/empty root home at /var/root daemon home at /var/root _uucp home at /var/spool/uucp _taskgated home at /var/empty _networkd home at /var/networkd ... Problema 1 Tenemos el siguiente fichero de texto:\ngonzalez*garcia,pepe;123456789;cl pez, 1 1A;Gijón;Asturias gonzalez*perez,pepa;999555666;cl pez, 1 1A;Gijón;Asturias garcia*fernandez,pepito;222333444;cl pez, 1 1A;Gijón;Asturias garcia*fernandez,pepita;777555444;cl pez, 1 1A;Gijón;Asturias Y queremos tratarlo para que nos devuelva algo así:\n Encabezado de informe  - pepe gonzalez garcia vive en cl pez, 1 1A en Gijón (Asturias)  - pepa gonzález perez vive en cl pez, 1 1A en Gijón (Asturias)  - pepito garcia fernandez vive en cl pez, 1 1A en Gijón (Asturias)  - pepita garcia fernandez vive en cl pez, 1 1A en Gijón (Asturias) ---- Fin informe Pasos a seguir En primer lugar hemos de separar el nombre de los apellidos. El separador es una coma \u0026ldquo;,\u0026rdquo;.\nQuedaría así:\n trozo 1: apellido1*apellido2 trozo 2: nombre  En segundo lugar hemos de separar el apellido1 y el apellido2. El separador es un asterisco \u0026ldquo;*\u0026rdquo;.\nQuedaría así:\n trozo 1: apellido1 trozo 1: apellido2  Solución awk dispone de la función split que nos viene muy bien para nuestro propósito.\nEl script awk quedaría así:\n# nombres.awk  # funciones para devolver cada uno de los trozos  ## Nombre: ## En la matriz arrNombres se depositan los distintos trozos (separados por \u0026#34;,\u0026#34;) ## Devuelve el 2º trozo, que es el nombre function nombre(cadena){  str = split(cadena, arrNombres, \u0026#34;,\u0026#34;)  return arrNombres[2] }  ## Apellidos: function apellido1(cadena){  str = split(cadena, arrNombres, \u0026#34;,\u0026#34;)  ## Primero nos quedamos con el primer elemento (los 2 apellidos)  ## Después dividimos por (*) con lo cual en b tenemos 2 elementos:  str1 = split(arrNombres[1],arrApellidos,\u0026#34;*\u0026#34;)  ## b[1] =\u0026gt; primer apellido  return arrApellidos[1] }  function apellido2(cadena){  str = split(cadena, arrNombres, \u0026#34;,\u0026#34;)  str1 = split(arrNombres[1],arrApellidos,\u0026#34;*\u0026#34;)  ## b[2] =\u0026gt; segundo apellido  return arrApellidos[2] }  BEGIN {FS=\u0026#34;;\u0026#34; ; OFS=\u0026#34;-\u0026#34;; print \u0026#34;Encabezado de informe\u0026#34;} {print \u0026#34; - \u0026#34; nombre($1) \u0026#34; \u0026#34; apellido1($1) \u0026#34; \u0026#34; apellido2($1) \u0026#34; vive en \u0026#34; $3 \u0026#34; en \u0026#34;$4 \u0026#34; (\u0026#34;$5\u0026#34;)\u0026#34; } END {print \u0026#34;---- Fin informe\u0026#34;} Para ejecutar el script:\n$ awk -f nombres.awk nombres.csv [Problema 2] Con el fichero nombres.csv anterior, crear otro fichero, nombres_cambiados.csv, con los campos separador por \u0026ldquo;;\u0026rdquo; y con los campos nombre, apellido1 y apellido2 en columnas separadas.\nSolución: ## nombres1.awk  function nombre(cadena){  str = split(cadena, arrNombres, \u0026#34;,\u0026#34;)  return arrNombres[2] }  function apellido1(cadena){  str = split(cadena, arrNombres, \u0026#34;,\u0026#34;)  str1 = split(arrNombres[1],arrApellidos,\u0026#34;*\u0026#34;)  return arrApellidos[1] }  function apellido2(cadena){  str = split(cadena, arrNombres, \u0026#34;,\u0026#34;)  str1 = split(arrNombres[1],arrApellidos,\u0026#34;*\u0026#34;)  return arrApellidos[2] }  BEGIN {FS=\u0026#34;;\u0026#34; ; OFS=\u0026#34;-\u0026#34;} {print nombre($1) \u0026#34;;\u0026#34; apellido1($1) \u0026#34;;\u0026#34; apellido2($1) \u0026#34;;\u0026#34; $3 \u0026#34;;\u0026#34; $4 \u0026#34;;\u0026#34; $5 } Para ejecutarlo:\n $ awk -f nombres1.awk nombres.csv \u0026gt; nombres_cambiados.csv Resultado: pepe;gonzalez;garcia;cl pez, 1 1A;Gijón;Asturias pepa;gonzalez;perez;cl pez, 1 1A;Gijón;Asturias pepito;garcia;fernandez;cl pez, 1 1A;Gijón;Asturias pepita;garcia;fernandez;cl pez, 1 1A;Gijón;Asturias Leer +\n","date":"01 Jan, 2022","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cimg src=\"/images/awk.svg\" loading=\"lazy\" decoding=\"async\" alt=\"\" class=\"w-100 img-fluid rounded\" width=\"\" height=\"\"\u003e\n \n \n\n","permalink":"https://blog.mrpyton.com/posts/bash/notas-awk/","tags":["awk","bash","procesar datos"],"title":"Notas sobre awk"}]